---
interface Props {
  id?: string;
  code: string;
}

const { code, target, worker, restricted } = Astro.props;
---
<div style="border: 1px solid; padding: 4px;">Output:<div id={target}></div></div>

<pre>{code}</pre>

<pysandbox-example data-code={code} data-target={target} data-worker={worker} data-restricted={restricted}>
</pysandbox-example>

<script>
  import {PyMainThreadSandbox, PyWorkerSandbox} from 'pysandbox';

  async function getMainThreadSandbox(options) {
    const sandbox = new PyMainThreadSandbox(options);
    await sandbox.init();
    return sandbox;
  }

  async function getWorkerSandbox(options) {
    const sandbox = new PyWorkerSandbox(options);
    await sandbox.init();
    return sandbox;
  }

  class PySandboxExample extends HTMLElement {
    constructor() {
      super();
      this.exec();
    }
    async exec() {
      let sandbox;
      if (this.dataset.worker) {
        sandbox = await getWorkerSandbox({ restricted: this.dataset.restricted });
      } else {
        sandbox = await getMainThreadSandbox({ restricted: this.dataset.restricted });
      }
      try {
        const imports = await sandbox.findImports(this.dataset.code);
        await sandbox.installPackages(imports, {keep_going: true});
        await sandbox.exec(this.dataset.code, this.dataset.target);
      } catch (e) {
        if (this.dataset.target) {
          globalThis.document.getElementById(this.dataset.target).innerText = String(e);
        }
        console.error(e);
      }
    }
  }

  customElements.define('pysandbox-example', PySandboxExample);
</script>