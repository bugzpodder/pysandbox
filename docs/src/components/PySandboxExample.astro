---
interface Props {
  code: string;
  target?: string;
  worker?: boolean;
  restricted?: boolean;
}

const { code, target, worker, restricted } = Astro.props;
---

<script src="/pysandbox/coi-serviceworker.js" is:inline></script>

<style>
  :global(
      :not(a, strong, em, del, span, input)
        + :not(a, strong, em, del, span, input, :where(.not-content *))
    ) {
    margin-top: 0 !important;
  }
</style>

<div style="border: 1px solid; padding: 4px; margin-bottom: 4px;">
  Output:<div id={target} style="min-height: 500px"></div>
</div>

<div id="code-editor" style="margin-bottom: 1.5rem; height: 300px"></div>
<button class="format">Format Code</button>
<button class="run" style="margin-left: 4px">Run code</button>

<pysandbox-example
  data-code={code}
  data-target={target}
  data-worker={worker}
  data-restricted={restricted}
>
</pysandbox-example>

<script>
  import { PyMainThreadSandbox, PyWorkerSandbox } from "pysandbox";
  import { EditorView, basicSetup } from "codemirror";
  import { python } from "@codemirror/lang-python";
  const fixedHeightEditor = EditorView.theme({
    "&": { height: "300px" },
    ".cm-scroller": { overflow: "auto" },
  });

  let editor: EditorView;

  let sandbox: ISandbox;
  let target: string;

  async function getMainThreadSandbox(options) {
    const sandbox = new PyMainThreadSandbox(options);
    await sandbox.init();
    return sandbox;
  }

  async function getWorkerSandbox(options) {
    const sandbox = new PyWorkerSandbox(options);
    await sandbox.init();
    return sandbox;
  }

  async function run(code) {
    document.getElementById(target).replaceChildren();
    try {
      const imports = await sandbox.findImports(code);
      await sandbox.installPackages(imports, { keep_going: true });
      await sandbox.exec(code, target);
    } catch (e) {
      console.error(e);
      document.getElementById(target).innerText = String(e);
    }
  }

  class PySandboxExample extends HTMLElement {
    constructor() {
      super();
      editor = new EditorView({
        doc: this.dataset.code,
        extensions: [basicSetup, python(), fixedHeightEditor],
        parent: document.getElementById("code-editor"),
      });
      this.exec();
    }
    async exec() {
      target = this.dataset.target;
      try {
        if (this.dataset.worker) {
          if (typeof SharedArrayBuffer === "undefined") {
            throw new Error(
              "Unable to use SharedArrayBuffer due insecure environment.",
            );
          }
          sandbox = await getWorkerSandbox({
            restricted: this.dataset.restricted,
          });
        } else {
          sandbox = await getMainThreadSandbox({
            restricted: this.dataset.restricted,
          });
        }
      } catch (e) {
        if (this.dataset.target) {
          globalThis.document.getElementById(this.dataset.target).innerText =
            String(e);
        }
        console.error(e);
      }
      run(this.dataset.code);
    }
  }

  customElements.define("pysandbox-example", PySandboxExample);

  document.querySelectorAll("button.format").forEach((button) => {
    button.addEventListener("click", async () => {
      editor.dispatch({
        changes: {
          from: 0,
          to: editor.state.doc.length,
          insert: await sandbox.formatCode(editor.state.doc.toString()),
        },
      });
    });
  });

  document.querySelectorAll("button.run").forEach((button) => {
    button.addEventListener("click", () => {
      run(editor.state.doc.toString());
    });
  });
</script>
